 *Koleksiyon(Collections) Nedir?:
 Klasik programlama dillerinde array yani diziler çok önemli veri tipleridir.Bir çok problemimizi diziler yardımıyla çözebiliriz.
Ama bazı handikapları nedeniyle bir çok sorun karşısında da yetersiz kalırlar.Bu sorunları şöyle sıralıyabiliriz:
  -->Array'in elemanları aynı veri tipinde olmalıdır.
  -->Array'in boyutu önceden belirlenmelidir.
 Oysa programlama dillerinde farklı türlerde verileri saklamaya ihtiyaç duyarız.Ve çoğu zaman ne kadar veri saklayacağımız program 
program akışında belli olabilir.Koleksiyonlar tam da bu sorunları çözmek için dizilerin handikaplarından yaratılmıştır.
 Dizilerin aksine koleksiyonların bazı tipleri;üzerinde çalıştıkları makinanın RAM'i yettiği sürece genişleyebilirler ve farklı
türlerde veri tiplerini saklayabilirler.
 Koleksiyonların elemanları object tipindedir.Hatırlayacak olursak öğrendiğimiz veri tipleri için object sınıfından türediklerini
söylemiştik.Yani bu bir sorun değil, her türlü veriyi koleksiyonlar içerisinde saklayabiliriz.
 Koleksiyonlar System.Collections namespace'i yani isim uzayı altında bulunurlar.Yani bir koleksiyon tipini kullanmak istiyorsanız 
System.Collections'ı using direktifi ile programınıza import ediyor olmanız gerekiyor.
 *Dezavantajları:
 .NEt platformda kullanıdığımız veri tipleri 2'ye ayrılır. Değer ve referans veri tipleridir. Değer tipleri belliğin stack bölgesinde 
tutulurken, Referans tipleri belleğin heap bölgesinde tutulur.
 -->Değer Tipleri: int, long, float, double, decimal, char, bool, byte, short, struct, enum
 -->Referans Tipleri: string, object, class, interface, array, delegate, pointer
 Bir değer tipinin referans tipine dönüştürülme işlemine boxing işlemi, tam tersine unboxing işlemi denir.
 Koleksiyonlar verilerini object tipinde tutuyor demiştik. Object de bir referans tipi. Bu demek oluyor ki değer tipinde bir veriyi
koleksiyona eklemek istediğimde bir boxing işlemi yapıyorum. Daha sonra elemanı okumak istediğimde de unboxing işlemi yapıyorum. 
Boxing ve unboxing işlemleri bilgisayar açısından maliyetli bir işlemdir. Koleksiyon içerisindeki eleman sayısının artışına bağlı 
olarak bu boxing ve unboxing işlemlerinin sayısı artacaktır. Buna bağlı olarakta uygulamanın performansı olumsuz yönde etkilenecektir.
 *Stack & Heap Kavramları
 Stack ve Heap kavramlarından kısaca bahsetmek gerekirse, ram’in mantıksal bölümleridir diyebiliriz. Stack’de değer tipleri, pointer 
ve adresler saklanırken, Heap’de ise referans değerleri saklanmaktadır.
 Stack’e erişim Heap’den daha hızlıdır ve Stack, LIFO (Last-In-First-Out) mantığında çalışmaktadır. Yani son gelen ilk olarak çıkar. 
Bu sebep ile aradan herhangi bir eleman çıkartamazsınız, birbirleri ile ilişki içerisindedirler.
 Struct tipindeki değişkenler değer tipleridir ve Stack içerisinde saklanmaktadır. Class tipindeki değişkenler ise referans tipleridir 
ve referansları Stack’de kendisi ise Heap’de saklanır.
 Stack & Heap’in genel özelliklerine kısaca bir bakacak olursak;
 -->Stack ve Heap ram’in mantıksal bölümleridir.
 -->Stack LIFO mantığında çalışır. Yani son gelen ilk olarak çıkar.
 -->Stack’de değer tipleri, pointer ve adresler saklanırken Heap’de ise referans değerleri saklanır.
 -->Stack daha hızlıdır. Ulaşılmak istenen veriler ard arda sıralanmış olur.
 -->Heap ortak olarak kullanılır ve uygulama başlatıldığında başlar.
 
